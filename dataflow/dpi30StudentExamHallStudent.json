{
	"name": "dpi30StudentExamHallStudent",
	"properties": {
		"folder": {
			"name": "dpi30testeusdj"
		},
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "dpi30djStudentSource",
						"type": "DatasetReference"
					},
					"name": "source1"
				},
				{
					"dataset": {
						"referenceName": "dpi30djExamHall",
						"type": "DatasetReference"
					},
					"name": "source2"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "dpi30StudentExamHallResult",
						"type": "DatasetReference"
					},
					"name": "sink1"
				}
			],
			"transformations": [
				{
					"name": "join1"
				},
				{
					"name": "aggregate1"
				},
				{
					"name": "select1"
				}
			],
			"scriptLines": [
				"source(output(",
				"          id as integer,",
				"          Name as string,",
				"          ExamHallNumber as integer",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     limit: 10,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet',",
				"     partitionBy('roundRobin', 2)) ~> source1",
				"source(output(",
				"          HallNumber as integer,",
				"          HallName as string",
				"     ),",
				"     allowSchemaDrift: false,",
				"     validateSchema: true,",
				"     ignoreNoFilesFound: false,",
				"     partitionBy('hash', 1)) ~> source2",
				"source1, source2 join(ExamHallNumber == HallNumber,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> join1",
				"join1 aggregate(groupBy(HallName),",
				"     Name = count(Name)) ~> aggregate1",
				"aggregate1 select(mapColumn(",
				"          HallName,",
				"          StudentCount = Name",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1",
				"select1 sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> sink1"
			]
		}
	}
}