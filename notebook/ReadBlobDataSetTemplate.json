{
	"name": "ReadBlobDataSetTemplate",
	"properties": {
		"folder": {
			"name": "dpi30testeusdj/old"
		},
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "testspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "fde3aa7a-2562-41dc-ad65-e0702878f98a"
			}
		},
		"metadata": {
			"saveOutput": true,
			"synapse_widget": {
				"version": "0.1"
			},
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_spark",
				"display_name": "Synapse Spark"
			},
			"language_info": {
				"name": "scala"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/a802af10-3082-4ea6-b3db-542043a41e96/resourceGroups/rg-dpi30-test-eus-001/providers/Microsoft.Synapse/workspaces/dpi30-test-eus-syn-01/bigDataPools/testspark",
				"name": "testspark",
				"type": "Spark",
				"endpoint": "https://dpi30-test-eus-syn-01.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/testspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net",
					"authHeader": null
				},
				"sparkVersion": "3.1",
				"nodeCount": 3,
				"cores": 8,
				"memory": 56,
				"extraHeader": null
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# Access data on Azure Storage Blob (WASB) with Synapse Spark\n",
					"\n",
					"You can access data on Azure Storage Blob (WASB) with Synapse Spark via following URL:\n",
					"\n",
					"    wasb[s]://<container_name>@<storage_account_name>.blob.core.windows.net/<path>\n",
					"\n",
					"This notebook provides examples of how to read data from WASB into a Spark context and how to write the output of Spark jobs directly into a WASB location."
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Load a sample data\n",
					"\n",
					"Let's first load the [public holidays](https://azure.microsoft.com/en-us/services/open-datasets/catalog/public-holidays/) from Azure Open datasets as a sample."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// set blob storage account connection for open dataset\n",
					"\n",
					"val hol_blob_account_name = \"dpi30testeusdlsarz01\"\n",
					"val hol_blob_container_name = \"rz-container\" //\n",
					"val hol_blob_relative_path = \"Pricing/dj_test/\"\n",
					"val hol_blob_sas_token = \"\"\n",
					"\n",
					"val hol_wasbs_path = f\"wasbs://$hol_blob_container_name@$hol_blob_account_name.blob.core.windows.net/$hol_blob_relative_path\"\n",
					"spark.conf.set(f\"fs.azure.sas.$hol_blob_container_name.$hol_blob_account_name.blob.core.windows.net\",hol_blob_sas_token)"
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// load the sample data as a Spark DataFrame\n",
					"val hol_df = spark.read.parquet(hol_wasbs_path) \n",
					"hol_df.show(5, truncate = false)"
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"## Write data to Azure Storage Blob\n",
					"\n",
					"Synapse leverage **Shared access signature (SAS)** to access Azure Blob Storage. To avoid exposing SAS keys in the code, we recommend creating a new linked service in Synapse workspace to the Azure Blob Storage account you want to access.\n",
					"\n",
					"Follow these steps to add a new linked service for an Azure Blob Storage account:\n",
					"\n",
					"1. Open the [Azure Synapse Studio](https://web.azuresynapse.net/).\n",
					"2. Select **Manage** from the left panel and select **Linked services** under the **External connections**.\n",
					"3. Search **Azure Blob Storage** in the **New linked Service** panel on the right.\n",
					"4. Select **Continue**.\n",
					"5. Select the Azure Blob Storage Account to access and configure the linked service name. Suggest using **Account key** for the **Authentication method**.\n",
					"6. Select **Test connection** to validate the settings are correct.\n",
					"7. Select **Create** first and click **Publish all** to save your changes.\n",
					"\n",
					"You can access data on Azure Blob Storage with Synapse Spark via following URL:\n",
					"\n",
					"```wasb[s]://<container_name>@<storage_account_name>.blob.core.windows.net/```\n",
					"\n",
					"Please make sure to allow contatiner level read and write permission. Fill in the access info for your Azure storage blob in the cell below. "
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// set your blob storage account connection\n",
					"\n",
					"val blob_account_name = \"\" // replace with your blob name\n",
					"val blob_container_name = \"\" //replace with your container name\n",
					"val blob_relative_path = \"\" //replace with your relative folder path\n",
					"val linked_service_name = \"\" //replace with your linked service name\n",
					"\n",
					"val blob_sas_token = mssparkutils.credentials.getConnectionStringOrCreds(linked_service_name)\n",
					"\n",
					"val wasbs_path = f\"wasbs://$blob_container_name@$blob_account_name.blob.core.windows.net/$blob_relative_path\"\n",
					"spark.conf.set(f\"fs.azure.sas.$blob_container_name.$blob_account_name.blob.core.windows.net\",blob_sas_token)\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as Parquet, JSON or CSV\n",
					"If you have a dataframe, you can save it to Parquet or JSON with the .write.parquet(), .write.json() and .write.csv() methods respectively.\n",
					"\n",
					"Dataframes can be saved in any format, regardless of the input format.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// set the path for the output file\n",
					"\n",
					"val parquet_path = wasbs_path + \"holiday.parquet\"\n",
					"val json_path = wasbs_path + \"holiday.json\"\n",
					"val csv_path = wasbs_path + \"holiday.csv\""
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"source": [
					"import org.apache.spark.sql.SaveMode\n",
					"\n",
					"hol_df.write.mode(SaveMode.Overwrite).parquet(parquet_path)\n",
					"hol_df.write.mode(SaveMode.Overwrite).json(json_path)\n",
					"hol_df.write.mode(SaveMode.Overwrite).option(\"header\", \"true\").csv(csv_path)"
				],
				"execution_count": 6
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Save a dataframe as text files\n",
					"If you have a dataframe that you want ot save as text file, you must first covert it to an RDD and then save that RDD as a text file.\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// Define the text file path and covert spark dataframe into RDD\n",
					"val text_path = wasbs_path + \"holiday.txt\"\n",
					"val hol_RDD = hol_df.rdd"
				],
				"execution_count": 9
			},
			{
				"cell_type": "markdown",
				"source": [
					"If you have an RDD, you can convert it to a text file like the following:\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"// Save RDD as text file\n",
					"hol_RDD.saveAsTextFile(text_path)"
				],
				"execution_count": 10
			},
			{
				"cell_type": "markdown",
				"source": [
					"# Read data from Azure Storage Blob\n",
					""
				]
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from parquet files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df_parquet = spark.read.parquet(parquet_path)"
				],
				"execution_count": 11
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from JSON files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df_json = spark.read.json(json_path)"
				],
				"execution_count": 12
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create a dataframe from CSV files\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val df_csv = spark.read.option(\"header\", \"true\").csv(csv_path)"
				],
				"execution_count": 13
			},
			{
				"cell_type": "markdown",
				"source": [
					"### Create an RDD from text file\n",
					""
				]
			},
			{
				"cell_type": "code",
				"source": [
					"val text = sc.textFile(text_path)"
				],
				"execution_count": 14
			},
			{
				"cell_type": "code",
				"source": [
					"text.take(5).foreach(println)"
				],
				"execution_count": 15
			}
		]
	}
}